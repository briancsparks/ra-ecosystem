#!/bin/bash -ex

test -f ${HOME}/qn-bootstrap-nonroot-run && exit 0

qn-cmd-from-s3 "s3://${NAMESPACE_LC}/quick-net/deploy/${INSTANCE_ID}/boot-shell-commands"

# We like github
ssh-keyscan github.com              >> ~/.ssh/known_hosts
ssh-keyscan github.azc.ext.hp.com   >> ~/.ssh/known_hosts

# Key files
aws s3 cp "s3://${NAMESPACE_LC}/quick-net/deploy/${INSTANCE_ID}/home/.bashrc"       - >> "$HOME/.bashrc"
aws s3 cp "s3://${NAMESPACE_LC}/quick-net/deploy/${INSTANCE_ID}/home/.profile"      - >> "$HOME/.profile"
aws s3 cp "s3://${NAMESPACE_LC}/quick-net/deploy/${INSTANCE_ID}/home/.bash_aliases" - >> "$HOME/.bash_aliases"


# We need VIM
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

aws s3 cp "s3://${NAMESPACE_LC}/quick-net/deploy/${INSTANCE_ID}/home/.vimrc"        - >> "$HOME/.vimrc"

git clone https://github.com/chr4/nginx.vim ~/.vim/bundle/nginx.vim

# https://github.com/editor-bootstrap/vim-bootstrap


# Get Node.js modules
mkdir -p run && cd $_

# Run Anywhere
git clone git@github.com:briancsparks/ra-ecosystem
cd ra-ecosystem
git checkout feature/stack

# Webtier -----
if which nginx; then
  # ---- lambda-net
  cd apps/lambda-net
  npm i

  pm2 start server.js

  # Is nginx running?
  if ps aux | egrep -v grep | egrep nginx; then
    sudo nginx -t && sudo nginx -s reload
  else
    sudo nginx -t && sudo nginx
  fi

  tree /etc/nginx

  echo "Nginx processes:"
  ps aux | egrep -v grep | egrep nginx
fi


# FILES="$(aws s3api list-objects --bucket ${NAMESPACE_LC} --prefix quick-net/deploy/${INSTANCE_ID}/home | jq -r '.Contents[].Key')"
# for f in $FILES; do
#   aws s3 cp "s3://${NAMESPACE_LC}/$f" - >> "$HOME"
#   chmod 0755 "/usr/sbin/$1"
# done



echo "true" > ${HOME}/qn-bootstrap-nonroot-run



# etcd on docker
#
# rm -rf /tmp/etcd-data.tmp && mkdir -p /tmp/etcd-data.tmp && \
#   docker rmi gcr.io/etcd-development/etcd:v3.3.18 || true && \
#   docker run \
#   -p 2379:2379 \
#   -p 2380:2380 \
#   --mount type=bind,source=/tmp/etcd-data.tmp,destination=/etcd-data \
#   --name etcd-gcr-v3.3.18 \
#   gcr.io/etcd-development/etcd:v3.3.18 \
#   /usr/local/bin/etcd \
#   --name s1 \
#   --data-dir /etcd-data \
#   --listen-client-urls http://0.0.0.0:2379 \
#   --advertise-client-urls http://0.0.0.0:2379 \
#   --listen-peer-urls http://0.0.0.0:2380 \
#   --initial-advertise-peer-urls http://0.0.0.0:2380 \
#   --initial-cluster s1=http://0.0.0.0:2380 \
#   --initial-cluster-token tkn \
#   --initial-cluster-state new \
#   --log-level info \
#   --logger zap \
#   --log-outputs stderr
#
# docker exec etcd-gcr-v3.3.18 /bin/sh -c "/usr/local/bin/etcd --version"
# docker exec etcd-gcr-v3.3.18 /bin/sh -c "/usr/local/bin/etcdctl version"
# docker exec etcd-gcr-v3.3.18 /bin/sh -c "/usr/local/bin/etcdctl endpoint health"
# docker exec etcd-gcr-v3.3.18 /bin/sh -c "/usr/local/bin/etcdctl put foo bar"
# docker exec etcd-gcr-v3.3.18 /bin/sh -c "/usr/local/bin/etcdctl get foo"

