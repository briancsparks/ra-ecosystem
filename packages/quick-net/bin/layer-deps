#!/bin/bash -e

#
#   --package=dir-that-holds-package.json
#   --name=What AWS Lambda knows as the name
#   --push
#   --push-layer
#   --push-both
#

eval "$(cli-shezargs __f 100 $0 $@)"

# We dont need the helper files in the tmp dir, just the dir
rm $TMP_DIR/*

hash claudia || die "Cannot find claudia. Install it with 'npm i -g claudia'"
hash jq      || die "Cannot find jq"

package_file="${package}/package.json"
test -f $package_file || die "--package= must point to a package.json file"

[[ -n $push_both ]] && push="1"
[[ -n $push_both ]] && push_layer="1"

[[ -n $name ]] || name="$(cat $package_file | jq -r .name)"

# ----- Put the project src in the tmp dir -----
printf "\nCopying source to $TMP_DIR/opt/nodejs...\n"
echo "----------------------------------------------"
mkdir -p $TMP_DIR/opt/nodejs
cp -r $package/* $TMP_DIR/opt/nodejs/

# Go there
cd $TMP_DIR/opt/nodejs

# Save package.json
cp package.json ../

#------------------------------------------------------------
# ----- Make small zip file of just the source, sans the deps
printf "\nMaking deployable zip for just the $name project...\n"
echo "----------------------------------------------------------"

# Clobber the deps
test -d node_modules && rm -rf node_modules

# Get new package.json, without the deps
cat ../package.json | jq 'del(.dependencies) + {dependencies:{}}' > ./package.json

# Package it up TODO: support `claudia update`?
claudia pack --output ../../$name.zip --force

cd ..


if [[ -n $push_layer || -z $push ]]; then
  #------------------------------------------------------------
  # ----- Make a zip usable as a layer that is just the deps
  printf "\nMaking layer zip for the dependencies...\n"
  echo "---------------------------------------------"

  #cd opt
  rm -rf nodejs/
  mkdir -p nodejs && cd $_
  cp ../package.json ./

  # ----- Pull in the deps -----
  yarn --production

  # ----- zip up the layer file
  cd ..
  zip -r ../deps-layer-for-$name.zip nodejs
fi

# Clean up
cd ..
rm -rf opt/

#------------------------------------------------------------
# ----- Done packaging...

# ----- Should we push the results?
if [[ -n $push_layer ]]; then
  printf "\nPublishing layer\n"
  echo     "----------------"
  aws lambda publish-layer-version --layer-name deps-layer-for-${name} --description "dependencies for ${name} function" --zip-file fileb://deps-layer-for-${name}.zip --compatible-runtimes nodejs8.10 > layer-publish-result.json
  layer_arn="$(cat layer-publish-result.json | jq -r '.LayerVersionArn')"

  echo "  $layer_arn"
fi

if [[ -n $push ]]; then
  printf "\nPublishing code\n"
  echo     "---------------"
  aws lambda update-function-code             --function-name "${name}" --zip-file fileb://${name}.zip > update-fn-code-result.json
  aws lambda update-function-code             --function-name "${name}-public-express" --zip-file fileb://${name}.zip > update-public-fn-code-result.json

  if [[ -n $layer_arn ]]; then
    printf "\nUpdating function layer\n"
    echo     "-----------------------"
    aws lambda update-function-configuration --function-name "${name}" --layers $layer_arn > update-fn-conf-result.json
    aws lambda update-function-configuration --function-name "${name}-public-express" --layers $layer_arn > update-public-fn-conf-result.json
  fi
fi

#------------------------------------------------------------
# ----- Done.

cd $start_dir

printf "\nResult:\n"
echo "-------"
fn $TMP_DIR . | xargs ls -l

#cli_shezargs_cleanup
pwd

